spring.application.name=jobms

server.port=8081

##H2 DATABASE
#spring.datasource.url=jdbc:h2:mem:jobDb
#spring.datasource.driverClassName=org.h2.Driver
#spring.h2.console.enabled=true
#spring.jpa.show=true
#spring.jpa.hibernate.ddl-auto=update

#POSTGRESQL DATABASE
spring.datasource.url=jdbc:postgresql://localhost:5432/jobs
spring.datasource.username=postgres
spring.datasource.password=root
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
#the below line tells jpa to automatically create and drop the db schema on the basis of session
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#Config-server
#spring.config.import=configserver:http://localhost:8080
#You can use oprional for the scenario, what happens if the config server is not available
#spring.config.import=optional:configserver:http://localhost:8080

#To fetch the profiles from config server
#spring.profiles.active=dev

#Actuator
#exposing the health end point to the actuator
management.endpoints.web.exposure.include=health
#adding a lot more details to this particular end point
management.endpoint.health.show-details=always
#enables the health check for circuit breakers in actuator
management.health.circuitbreakers.enabled=true

#Resilience4J
#companyBreaker is the instance being created, this property registers a health indicator
#for companyBreaker circuit breaker.
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
#No. of calls stored in the sliding window of the circuit breaker,generally used to calculate
#the percentage or failure rate
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
#No. of calls that can be recorded before the circuit breaker calculate the failure rate
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
#how long circuit breaker will stay in open state
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
#this defines a threshold when exceeded the circuit breaker transitions to open state
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
#this property registers a health indicator into the health endpoint
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
#determines the type of sliding window ie count_based, which means that the last n calls are recorded
#and they are used to calculate the failure rate where n is the zise of the sliding window
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

#Retry module, number of retries when the network call fails
resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
#the duration we will wait before making the next call
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s

#Rate Limiter,
#default wait time a thread will wait to acquire permission to run when limit is reached
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0
#limit-refresh-period is the period after which a limit is refreshed
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=4
#The ratelimiter will allow 2 call every 4 seconds for us , if more call are made within that period
#they will be immediately rejected without waiting as timeout duration is 0, if the timeout is
#5 seconds & more calls are made within that period then the calls won't be immediately rejected
#they will be made to wait for that duration
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=2

